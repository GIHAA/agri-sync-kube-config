Directory structure:
└── agri-sync-kube-config/helm/
    └── microservices/
        ├── Chart.yaml
        ├── templates/
        │   ├── chat-bot-service-deployment.yaml
        │   ├── services.yaml
        │   ├── reward-service-deployment.yaml
        │   ├── user-service-deployment.yaml
        │   ├── frontend-deployment.yaml
        │   ├── gateway-deployment.yaml
        │   ├── user-interaction-service-deployment.yaml
        │   └── price-prediction-service-deployment.yaml
        └── values.yaml

================================================
File: /microservices/Chart.yaml
================================================
# helm/microservices/Chart.yaml
apiVersion: v2
name: agri-sync
description: Helm chart for Agri Sync microservices
version: 0.1.0
type: application

================================================
File: /microservices/templates/chat-bot-service-deployment.yaml
================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.chatbot.name }}
spec:
  replicas: {{ .Values.chatbot.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.chatbot.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.chatbot.name }}
    spec:
      containers:
        - name: {{ .Values.chatbot.name }}
          image: "{{ .Values.chatbot.image.repository }}:{{ .Values.chatbot.image.tag }}"
          ports:
            - containerPort: 4002


================================================
File: /microservices/templates/services.yaml
================================================
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.gateway.name }}
spec:
  type: {{ .Values.gateway.service.type }}
  ports:
    - port: {{ .Values.gateway.service.port }}
      targetPort: {{ .Values.gateway.service.targetPort }}
      {{- if eq .Values.gateway.service.type "NodePort" }}
      nodePort: {{ .Values.gateway.service.nodePort }}
      {{- end }}
  selector:
    app: {{ .Values.gateway.name }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.userService.name }}
spec:
  type: {{ .Values.userService.service.type }}
  ports:
    - port: {{ .Values.userService.service.port }}
      targetPort: 5000
  selector:
    app: {{ .Values.userService.name }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.rewardService.name }}
spec:
  type: {{ .Values.rewardService.service.type }}
  ports:
    - port: {{ .Values.rewardService.service.port }}
      targetPort: 3003
  selector:
    app: {{ .Values.rewardService.name }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.pricePredictionService.name }}
spec:
  type: {{ .Values.pricePredictionService.service.type }}
  ports:
    - port: {{ .Values.pricePredictionService.service.port }}
      targetPort: 3002
  selector:
    app: {{ .Values.pricePredictionService.name }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.frontend.name }}
spec:
  type: {{ .Values.frontend.service.type }}
  ports:
    - port: {{ .Values.frontend.service.port }}
      targetPort: {{ .Values.frontend.service.targetPort }}
      nodePort: {{ .Values.frontend.service.nodePort }}
  selector:
    app: {{ .Values.frontend.name }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.userinter.name }}
spec:
  type: {{ .Values.userinter.service.type }}
  ports:
    - port: {{ .Values.userinter.service.port }}
      targetPort: {{ .Values.userinter.service.targetPort }}
      nodePort: {{ .Values.userinter.service.nodePort }}
  selector:
    app: {{ .Values.userinter.name }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.chatbot.name }}
spec:
  type: {{ .Values.chatbot.service.type }}
  ports:
    - port: {{ .Values.chatbot.service.port }}
      targetPort: {{ .Values.chatbot.service.targetPort }}
      nodePort: {{ .Values.chatbot.service.nodePort }}
  selector:
    app: {{ .Values.chatbot.name }}


================================================
File: /microservices/templates/reward-service-deployment.yaml
================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.rewardService.name }}
spec:
  replicas: {{ .Values.rewardService.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.rewardService.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.rewardService.name }}
    spec:
      containers:
        - name: {{ .Values.rewardService.name }}
          image: "{{ .Values.rewardService.image.repository }}:{{ .Values.rewardService.image.tag }}"
          ports:
            - containerPort: 3003
          env:
            - name: PORT
              value: "3003"
            - name: DB_HOST
              value: {{ .Values.database.host }}
            - name: DB_PORT
              value: {{ .Values.database.port | quote }}
            - name: DB_NAME
              value: {{ .Values.database.name }}
            - name: DB_USER
              value: {{ .Values.database.user }}
            - name: DB_PASSWORD
              value: {{ .Values.database.password }}
            - name: JWT_SECRET
              value: {{ .Values.jwt.secret }}
            - name: DB_SSL
              value: "true"
            - name: DB_SSL_REJECT_UNAUTHORIZED
              value: "false"


================================================
File: /microservices/templates/user-service-deployment.yaml
================================================
# helm/microservices/templates/user-service-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
 name: {{ .Values.userService.name }}
spec:
 replicas: {{ .Values.userService.replicaCount }}
 selector:
   matchLabels:
     app: {{ .Values.userService.name }}
 template:
   metadata:
     labels:
       app: {{ .Values.userService.name }}
   spec:
     containers:
     - name: {{ .Values.userService.name }}
       image: "{{ .Values.userService.image.repository }}:{{ .Values.userService.image.tag }}"
       ports:
       - containerPort: 5000
       env:
       - name: PORT
         value: "5000"
       - name: DB_HOST
         value: {{ .Values.database.host }}
       - name: DB_PORT
         value: {{ .Values.database.port | quote }}
       - name: DB_NAME
         value: {{ .Values.database.name }}
       - name: DB_USER
         value: {{ .Values.database.user }}
       - name: DB_PASSWORD
         value: {{ .Values.database.password }}
       - name: JWT_SECRET
         value: {{ .Values.jwt.secret }}
       - name: JWT_EXPIRES_IN
         value: {{ .Values.jwt.expiresIn }}
       - name: DB_SSL
         value: "true"
       - name: DB_SSL_REJECT_UNAUTHORIZED
         value: "false"

================================================
File: /microservices/templates/frontend-deployment.yaml
================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.frontend.name }}
spec:
  replicas: {{ .Values.frontend.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.frontend.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.frontend.name }}
    spec:
      containers:
        - name: {{ .Values.frontend.name }}
          image: "{{ .Values.frontend.image.repository }}:{{ .Values.frontend.image.tag }}"
          ports:
            - containerPort: 4000


================================================
File: /microservices/templates/gateway-deployment.yaml
================================================
# helm/microservices/templates/gateway-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.gateway.name }}
spec:
  replicas: {{ .Values.gateway.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.gateway.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.gateway.name }}
    spec:
      containers:
        - name: {{ .Values.gateway.name }}
          image: "{{ .Values.gateway.image.repository }}:{{ .Values.gateway.image.tag }}"
          ports:
            - containerPort: 3000
          env:
            - name: PORT
              value: "3000"
            - name: USER_SERVICE_URL
              value: "http://{{ .Values.userService.name }}:{{ .Values.userService.service.port }}"
            - name: REWARD_SERVICE_URL
              value: "http://{{ .Values.rewardService.name }}:{{ .Values.rewardService.service.port }}"
            - name: JWT_SECRET
              value: {{ .Values.jwt.secret }}
            - name: DB_SSL
              value: "true"
            - name: DB_SSL_REJECT_UNAUTHORIZED
              value: "false"

================================================
File: /microservices/templates/user-interaction-service-deployment.yaml
================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.userinter.name }}
spec:
  replicas: {{ .Values.userinter.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.userinter.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.userinter.name }}
    spec:
      containers:
        - name: {{ .Values.userinter.name }}
          image: "{{ .Values.userinter.image.repository }}:{{ .Values.userinter.image.tag }}"
          ports:
            - containerPort: 4001


================================================
File: /microservices/templates/price-prediction-service-deployment.yaml
================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.pricePredictionService.name }}
spec:
  replicas: {{ .Values.pricePredictionService.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.pricePredictionService.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.pricePredictionService.name }}
    spec:
      containers:
        - name: {{ .Values.pricePredictionService.name }}
          image: "{{ .Values.pricePredictionService.image.repository }}:{{ .Values.pricePredictionService.image.tag }}"
          ports:
            - containerPort: 5000
          env:
            - name: PORT
              value: "5000"
            - name: DB_HOST
              value: {{ .Values.database.host }}
            - name: DB_PORT
              value: {{ .Values.database.port | quote }}
            - name: DB_NAME
              value: {{ .Values.database.name }}
            - name: DB_USER
              value: {{ .Values.database.user }}
            - name: DB_PASSWORD
              value: {{ .Values.database.password }}
            - name: JWT_SECRET
              value: {{ .Values.jwt.secret }}
            - name: DB_SSL
              value: "true"
            - name: DB_SSL_REJECT_UNAUTHORIZED
              value: "false"


================================================
File: /microservices/values.yaml
================================================
global:
  environment: development

gateway:
  name: api-gateway
  replicaCount: 1
  image:
    repository: gihaa/as-gateway
    tag: latest
  service:
    type: LoadBalancer
    port: 80
    targetPort: 3000

userService:
  name: user-service
  replicaCount: 1
  image:
    repository: gihaa/as-user-service
    tag: latest
  service:
    type: ClusterIP
    port: 3001

rewardService:
  name: reward-service
  replicaCount: 1
  image:
    repository: gihaa/as-reward-service
    tag: latest
  service:
    type: ClusterIP
    port: 3003

pricePredictionService:
  name: price-prediction-service
  replicaCount: 1
  image:
    repository: gihaa/as-price-prediction-service
    tag: latest
  service:
    type: ClusterIP
    port: 3002

frontend:
  name: frontend
  replicaCount: 1
  image:
    repository: gihaa/as-gateway
    tag: latest
  service:
    type: NodePort  
    port: 80       
    targetPort: 4000  
    nodePort: 31001      

userinter:
  name: user-interaction-service
  replicaCount: 1
  image:
    repository: gihaa/as-gateway
    tag: latest
  service:
    type: ClusterIP
    port: 3005    

chatbot:
  name: chat-bot-service
  replicaCount: 1
  image:
    repository: gihaa/as-gateway
    tag: latest
  service:
    type: ClusterIP
    port: 3007    

database:
  user: "avnadmin"
  password: "AVNS_lP0uW9A3_MC4As3h-NL"
  host: "pg-122ba407-gihansudeeparandimal-f684.g.aivencloud.com"
  port: "17670"
  name: "defaultdb"

jwt:
  secret: "your_jwt_secret"
  expiresIn: "30d"


